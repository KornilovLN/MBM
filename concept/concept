//-----------------------------------------------------------------------------------------------------------
//--- программа MBM (ModBus master) разрабатывается как консольный вариант командной строки
//-----------------------------------------------------------------------------------------------------------

//--- 1 Содержит универсальный код и структуру запуска с командной строки консоли
//--- 2 Имеет текстовое оформление в терминале с применением символов псевдографики VT100 
//--- 3 с элементами меню для выбора вариантов, смены режимов, формирования запросов и т.п.
//--- 4 имеет возможность собирать данные из одного или нескольких устройств по протоколу modbus
//--- 5 и   фильтровать данные по заданным нстройкам в меню программы
//--- 6 и   записывать данные в журнал с указанием даты и времени в выбранном формате (формат указан из меню)
//--- 7 Должны быть разработаны форматы 
//---       сохранения потоков данных
//---       преобразования
//---       отправки в конвейер другому процессу (pipe, shared memory,..)
//---       отправки брокеру MQTT
//--- Вести логирование работы
//--- Сохранять настройки программы в файлах *.json 
//--- и     зачитывать настройки при старте по указанию из ком. строки
//--- Modbus реализовать как {RTU, ASCII, TCP} выбор в меню программы

//--- Для сохранения настроек выделить папку Config
//--- Для log файла выделить папку Log
//--- Для сохранения данных выделить папку Data (название данных -> Session.Datetime.Block_name.dt)
//--- Для хранения заданий создать структуру и иметь возможность сохранять их в папке Task (и читать также)

//--- в структуре задания, сформированном в меню программы возможны поля:
//--- input_block_name: {
        (RG_name, type, RG_addr, period),
        ... 
      }
//--- командное поле для ввода:
      holding_block_name: {  
        (RG_name, type, RG_addr, new_data)    
      }

//--- Какие модули возможно определить для структуризации программы
//--- 1 Модуль работы с командной строкой
//        -С <Config_<name>.json  - загрузит файл конфигурации или установит флажек, чтобы работать по default
//        -P <RTU | ASCII | TCP>  - выбор протокола работы программы                (ASCII default)
//        -B <baudrate>           - имеет смысл для работы с ком-портом             (19200 default)
//        -L                      - будет писать в лог файл текущие события         (name Log_<OS DateTime>)
//        -D                      - будет писать данные в файл Data_<name>.data     (name Data_<OS DateTime>)
//        -Ma <addr>              - указать адрес брокера для подписки на публикации
//        -Mt <topic>             - указать топик для публикации 
//        -h                      - выдаст help для пользователя (инструкции по программе)
//        -V                      - выдаст версию программы 
//--- 2 Модуль для работы с JSON форматом
//--- 3 Модуль оформления терминала
//--- 4 Модуль меню
        0 Загрузить сохраненные настройки по имени Config_<name>.json
        1 Установить Config_default, определенный в коде программы (заводские настройки)
        2 Сохранить настройки программы в Config_<name>.json  

//--- 5 Модуль авторизации
//--- 6 Модуль ведения лог-файлов
//--- 7 Модуль вывода потока данных в {файл, консоль, в другой процесс,..}
//--- 8 Модуль формирования, сохранения и загрузки настроек программы

//--- 9 Модуль работы с портами ttyUSB* и socket
//--- 10 Модуль работы с MQTT
//--- 11 Модуль работы программы как сервер http

//--- Возможны дополнительные модули
